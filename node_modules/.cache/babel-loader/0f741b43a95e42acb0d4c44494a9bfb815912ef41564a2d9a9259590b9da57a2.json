{"ast":null,"code":"import { put, call, takeEvery, all, fork } from \"redux-saga/effects\";\nimport { fetchWeather } from \"../../services/weatherService\";\nimport * as weatherActions from \"./weatherActions\";\nimport * as actionTypes from \"../actions_type\";\nfunction onWeatherRequest(_ref) {\n  let {\n    query\n  } = _ref;\n  return function* () {\n    try {\n      yield put(weatherActions.getWeatherRequest());\n      const {\n        data\n      } = yield call(fetchWeather, query);\n      yield put(weatherActions.getWeatherSuccess(data.payload));\n    } catch (error) {\n      yield put(weatherActions.getWeatherError(error.response.data.error));\n      console.log(\"saga error request\", error);\n    }\n  }();\n}\nfunction* watchOnLoadWeather() {\n  yield takeEvery(actionTypes.GET_WEATHER_DATA, onWeatherRequest);\n}\nexport default function* WeatherSaga() {\n  yield all([fork(watchOnLoadWeather)]);\n}\n_c = WeatherSaga;\nvar _c;\n$RefreshReg$(_c, \"WeatherSaga\");","map":{"version":3,"names":["put","call","takeEvery","all","fork","fetchWeather","weatherActions","actionTypes","onWeatherRequest","_ref","query","getWeatherRequest","data","getWeatherSuccess","payload","error","getWeatherError","response","console","log","watchOnLoadWeather","GET_WEATHER_DATA","WeatherSaga","_c","$RefreshReg$"],"sources":["C:/Users/Greenwich/JsApp/CreateReactApp/weatherapp/src/redux/searchWeather/weatherSaga.ts"],"sourcesContent":["import { put, call, takeEvery, all, fork } from \"redux-saga/effects\";\r\nimport { fetchWeather } from \"../../services/weatherService\";\r\nimport * as weatherActions from \"./weatherActions\";\r\nimport * as actionTypes from \"../actions_type\";\r\n\r\nfunction* onWeatherRequest({ query }: actionTypes.GetWeatherAction) {\r\n\ttry {\r\n\t\tyield put(weatherActions.getWeatherRequest());\r\n\t\tconst { data } = yield call(fetchWeather, query);\r\n\t\tyield put(weatherActions.getWeatherSuccess(data.payload));\r\n\t} catch (error: any) {\r\n\t\tyield put(weatherActions.getWeatherError(error.response.data.error));\r\n\t\tconsole.log(\"saga error request\", error);\r\n\t}\r\n}\r\n\r\nfunction* watchOnLoadWeather() {\r\n\tyield takeEvery(actionTypes.GET_WEATHER_DATA, onWeatherRequest);\r\n}\r\n\r\nexport default function* WeatherSaga() {\r\n\tyield all([fork(watchOnLoadWeather)]);\r\n}\r\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,SAAS,EAAEC,GAAG,EAAEC,IAAI,QAAQ,oBAAoB;AACpE,SAASC,YAAY,QAAQ,+BAA+B;AAC5D,OAAO,KAAKC,cAAc,MAAM,kBAAkB;AAClD,OAAO,KAAKC,WAAW,MAAM,iBAAiB;AAE9C,SAAUC,gBAAgBA,CAAAC,IAAA;EAAA,IAAC;IAAEC;EAAoC,CAAC,GAAAD,IAAA;EAAA,oBAAE;IACnE,IAAI;MACH,MAAMT,GAAG,CAACM,cAAc,CAACK,iBAAiB,EAAE,CAAC;MAC7C,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMX,IAAI,CAACI,YAAY,EAAEK,KAAK,CAAC;MAChD,MAAMV,GAAG,CAACM,cAAc,CAACO,iBAAiB,CAACD,IAAI,CAACE,OAAO,CAAC,CAAC;IAC1D,CAAC,CAAC,OAAOC,KAAU,EAAE;MACpB,MAAMf,GAAG,CAACM,cAAc,CAACU,eAAe,CAACD,KAAK,CAACE,QAAQ,CAACL,IAAI,CAACG,KAAK,CAAC,CAAC;MACpEG,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEJ,KAAK,CAAC;IACzC;EACD,CAAC;AAAA;AAED,UAAUK,kBAAkBA,CAAA,EAAG;EAC9B,MAAMlB,SAAS,CAACK,WAAW,CAACc,gBAAgB,EAAEb,gBAAgB,CAAC;AAChE;AAEA,eAAe,UAAUc,WAAWA,CAAA,EAAG;EACtC,MAAMnB,GAAG,CAAC,CAACC,IAAI,CAACgB,kBAAkB,CAAC,CAAC,CAAC;AACtC;AAACG,EAAA,GAFwBD,WAAW;AAAA,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}